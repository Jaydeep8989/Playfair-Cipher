def matrix(key):
	matrix=[]
	for e in key.upper():
		if e not in matrix:
			matrix.append(e)
	alphabet="ABCDEFGHIKLMNOPQRSTUVWXYZ"
	for e in alphabet:
		if e not in matrix:
			matrix.append(e)	
	matrix_group=[]
	for e in range(5):
		matrix_group.append('')
	matrix_group[0]=matrix[0:5]
	matrix_group[1]=matrix[5:10]
	matrix_group[2]=matrix[10:15]
	matrix_group[3]=matrix[15:20]
	matrix_group[4]=matrix[20:25]
	return matrix_group

def message_to_digraphs(message_original):
	message=[]
	for e in message_original:
		message.append(e)

	#Delete space
	for unused in range(len(message)):
		if " " in message:
			message.remove(" ")

	#If both letters are the same, add an "X" after the first letter.
	i=0
	for e in range(int(len(message)/2)):
		if message[i]==message[i+1]:
			message.insert(i+1,'X')
		i=i+2

	#If it is odd digit, add an "X" at the end
	if len(message)%2==1:
		message.append("X")
	i=0
	new=[]
	for x in range(1,int(len(message)/2+1)):
		new.append(message[i:i+2])
		i=i+2
	return new

def find_position(key_matrix,letter):
	x=y=0
	for i in range(5):
		for j in range(5):
			if key_matrix[i][j].upper()==letter.upper():
				x=i
				y=j
	return x,y

def cipher_to_digraphs(cipher):
	i=0
	new=[]
	for x in range(int(len(cipher)/2)):
		new.append(cipher[i:i+2])
		i=i+2
	return new

def encrypt_decrypt(input_text,key_matrix,n):	
	text=[]
	for e in input_text:
		p1,q1=find_position(key_matrix,e[0])
		p2,q2=find_position(key_matrix,e[1])
		if p1==p2:
			text.append(key_matrix[p1][(q1+n)%5])
			text.append(key_matrix[p1][(q2+n)%5])		
		elif q1==q2:
			text.append(key_matrix[(p1+n)%5][q1])
			text.append(key_matrix[(p2+n)%5][q2])
		else:
			text.append(key_matrix[p1][q2])
			text.append(key_matrix[p2][q1])
	output=""
	for e in text:
		output+=e
	return output.lower()

print("Playfair Cipher")
key=input("Enter the key : ")
message=input("Enter the message : ")
print ("\nEncrypting:")
mtodiagraphs = message_to_digraphs(message)
key_matrix = matrix(key)
print ("Matrix:")
for i in range(5):
    for j in range(5):
        print (key_matrix[i][j]," ", end='')
    print()
print("Break the message into Digraphs:\n",mtodiagraphs)
cipher = encrypt_decrypt(mtodiagraphs,key_matrix,1)
print ("Cipher: ",cipher )
ctodiagraphs = cipher_to_digraphs(cipher)
print ("\nDecrypting: \n"+"Plaintext: ",encrypt_decrypt(ctodiagraphs,key_matrix,-1))
